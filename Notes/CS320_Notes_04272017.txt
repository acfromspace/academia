CS320 Summer 2016 - Final rev A

***TEST IN BLACKBOARD***

2 pts each

What are the key ideas behind functional languages ability to auto. parallelize function calls? (Circle all that apply)
Forced inability to modify state, functions are data

Which part of lexical analysis chain is responsible for breaking the input strings up into potentially valid chunks?
Tokenizer

Tokenizer -> CFG/PArser -> Code Emission/Interpretation

Why would a large org. prefer to use a class based OOP language with built-in protection mechanisms for a large scale project? (Circle all that apply)
Poorly implemented code is protected against existing programmers
Well implented code is protected against existing and new programmers

Structure programming languages: (Circle all that apply)
Control structures such as if, for, switch, etc.

Which of the following is diff between C malloc and a C++ new call?
Malloc returns a pointer to memory, New returns the memory? INCORRECT (new returns to a pointer, not to the memory)
*The constructor is the most basic member function

C++ and Python are different how?
Pointers, last answer

How does the 2nd step in the compile/interpret chain work?
Why do we do the 2nd step in the compile/interpret chain?
Apply rules to the sentences to create a parser that is produceable
    Verify that the sentences are grammarble

In OOP, why does some languages have implicit arguments to member functions?
Syntatic Sugar

What are list comprehensions? How are Python's and Haskell's different conceptually?
Map and reduce
[x for x in food] [foo(x) for x in food] [foo(x) for x in food in x]

What is a data type?
Info on how to store data
int x; (There is a long stored in memory that is two's complement)

3. (20 pts/10 pts each)

"KindaSum" sums every even value in the data structure

C

int KindaSum(int *data, int length) {
    int sum = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] % 2 == 0)
            sum += data[i];
    }
    return sum;
}

int * Zipper(int *first, int *second, int length) {
    int * total = malloc(length * sizeof(in));
    for (int i = 0; i < length * 2; i++) {
        total[i] = first[i/2];
        total[i+1] = second[i/2]
    }
    return total;
}

Python

def KindaSum(d):
    sum = 0
    for el in d:
        if (el % 2 == 0):
            sum = sum + el
    return sum

def Zipper(first,second)
    r = []
    for i in range (0, length(f)):
        r.append(f[i])
        r.append(s[i])
    return r

Lua

function Zipper(f, s)
    local r = {}
    for i, v in ipairs(f) do
        r[#r + 1] = v
        r[#r + 1] = s[i]
    end
    return r
end

Class Wave:
    func = 0
    def __init__(self,s):
        self.size = s
        self.idx = 0
    def Generate(self,x)
        if(self.func == 0)


def Generate(self,x)
    try:
    r = [self.func(inselfsize) for i in range(self.idx, self...)]
        selfidx = self.idx + x


Class CosWave(wave):
    func = math.cos

Class SinWave(wave):
    func = math.sin