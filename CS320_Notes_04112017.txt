Shift Reduce Parsing - Bottom up Parsing, finds a single correct parse

Shift - Take a single token from the input string.
            Put token onto the parse stack.

Reduce - We apply any rule possible to reduce set of term & nonterm sumbols into their non terminating antecedent
            Reverse a rule

LR - Left-right Parsing

A value can be:

Value -> identifier
Value -> int
Product -> value * value
Sum -> value + value
Value -> sum
Value -> product

Parse stack         Look Ahead          Operation       input
                    3                   Shift           3 + A * B + 4
int                 +                   Reduce 2        + A * B + 4
value               +                   Shift           + A * B + 4
value +             identifier          Shift           A * B + 4
value + identifier  *                   Reduce 1        *B + 4
value + value       *                   Reduce 4        *B + 4
sum                 *                   Reduce 5        *B + 4
value               *                   Shift           *B + 4
value *             identifier          Shift           B + 4
value * identifier  *                   Reduce 1        + 4
value * value       *                   Reduce 3        + 4

Chrono order:

V - S - V - int
        X - x
        V - V - ident
          - *
          - V - V ident
              - V i dent

3 + A * B + 4

Sum was put last though found first (S).

Why do infix to postfix?

Cause you can do a postfix with a stack machine.

infix -> post fix
reading L -> R5

input string -> split -> operator stack
                      -> postfixoutput

1) if token is not an operator, put it in postfix output
2) if is op:
    a) if top of operator stack has higher precidence, pop from op stack to output until top is low
    b) push op on stack

op stack
post fix: 3AB*+4+